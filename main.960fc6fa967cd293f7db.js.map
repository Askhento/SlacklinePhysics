{"version":3,"sources":["webpack://three-seed/./src/entry.js","webpack://three-seed/webpack/bootstrap","webpack://three-seed/webpack/runtime/compat get default export","webpack://three-seed/webpack/runtime/define property getters","webpack://three-seed/webpack/runtime/global","webpack://three-seed/webpack/runtime/hasOwnProperty shorthand","webpack://three-seed/webpack/runtime/make namespace object","webpack://three-seed/webpack/runtime/jsonp chunk loading","webpack://three-seed/webpack/startup"],"names":["THREE","require","OrbitControls","Stats","Ammo","then","container","document","createElement","id","body","appendChild","camera","controls","scene","renderer","stats","showPanel","dom","collisionConfiguration","softBodySolver","dispatcher","broadphase","solver","physicsWorld","INTERSECTED","raycaster","clock","Clock","rigidBodies","transformAux1","mouse","Vector2","onDocumentMouseDown","event","preventDefault","createSlackline","position","console","log","onDocumentMouseMove","x","clientX","window","innerWidth","y","clientY","innerHeight","a","b","anchorA","anchorB","maxDelta","pos","Vector3","quat","Quaternion","AnchorSize","createSphere","createMaterial","Mesh","ropeLength","clone","sub","length","ropeDensity","numSegments","Math","ceil","segmentLength","segmentMass","ballRadius","balls","i","k","newPos","z","multiplyScalar","add","push","createSpring","anchors","_tmpAmmoQuaternion","_tmpAmmoVectorA","_tmpAmmoVectorB","transformA","transformB","spring1","userData","physicsBody","enableSpring","setStiffness","setDamping","setLinearLowerLimit","setLinearUpperLimit","addConstraint","radius","mass","material","threeObject","SphereGeometry","castShadow","shape","setMargin","physicsShape","copy","quaternion","transform","setIdentity","setOrigin","setRotation","w","motionState","localInertia","calculateLocalInertia","rbInfo","setActivationState","addRigidBody","createRigidBody","MeshPhongMaterial","color","floor","random","onWindowResize","aspect","updateProjectionMatrix","setSize","PerspectiveCamera","Scene","Raycaster","target","WebGLRenderer","setClearColor","setPixelRatio","devicePixelRatio","shadowMap","enabled","TextureLoader","ambientLight","AmbientLight","light","DirectionalLight","set","shadow","left","right","top","bottom","near","far","mapSize","innerHTML","domElement","addEventListener","initGraphics","setGravity","getWorldInfo","set_m_gravity","pos1","slack0","slack2","createTestScene","animate","deltaTime","requestAnimationFrame","begin","stepSimulation","il","objThree","ms","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","updatePhysics","getDelta","update","setFromCamera","intersects","intersectObjects","children","object","emissive","setHex","currentHex","getHex","getRaycast","render","end","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call","m","n","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","obj","prop","prototype","hasOwnProperty","r","Symbol","toStringTag","value","installedChunks","179","deferredModules","checkDeferredModules","webpackJsonpCallback","parentChunkLoadingFunction","data","chunkId","chunkIds","moreModules","runtime","executeModules","resolves","shift","apply","chunkLoadingGlobal","self","checkDeferredModulesImpl","result","deferredModule","fulfilled","j","depId","splice","s","forEach","bind","startup"],"mappings":"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","file":"main.960fc6fa967cd293f7db.js","sourcesContent":["\n\nconst THREE = require('three');\nconst OrbitControls = require('three-orbit-controls')(THREE)\nimport Ammo from 'ammojs-typed';\n\nimport { MeshLine, MeshLineMaterial, MeshLineRaycast } from 'three.meshline';\n\n// const Ammo = require(\"ammo.js\");\n// require('ammojs-typed')\nconst Stats = require('stats.js');\n\n\n\n// fucking black magic, to get types from Ammo\nAmmo(Ammo).then(() => {\n\n    const DEBUG = false;\n    // // Detects webg  l\n    // if ( ! Detector.webgl ) {\n    //     Detector.addGetWebGLMessage();\n    //     document.getElementById( 'container' ).innerHTML = \"\";\n    // }\n\n    // - Global variables -\n\n    // Graphics variables\n    // var stats;\n\n    const container = document.createElement(\"div\");\n    container.id = \"container\"\n\n    document.body.appendChild(container);\n\n    const stats = new Stats();\n    stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\n    document.body.appendChild( stats.dom );\n\n\n    let camera, controls, scene, renderer;\n    let textureLoader;\n    let clock = new THREE.Clock();\n\n    // Physics letiables\n    let gravityConstant = -9.8;\n    let collisionConfiguration;\n    let softBodySolver;\n    let dispatcher;\n    let broadphase;\n    let solver;\n    let physicsWorld;\n    let rigidBodies = [];\n    const margin = 0.05;\n    let hinge;\n    let rope;\n    const transformAux1 = new Ammo.btTransform();\n    \n    const mouse = new THREE.Vector2();\n    let INTERSECTED;\n    let raycaster;\n\n    let time = 0;\n    let armMovement = 0;\n\n    // - Main code -\n\n    init();\n\n\n\n    // - Functions -\n\n    function init() {\n\n        initGraphics();\n\n        initPhysics();\n\n        createTestScene()\n\n        // createObjects();\n\n        if (DEBUG) {\n            initInput();\n        } else {\n            animate();\n        }\n\n    }\n\n    function initGraphics() {\n\n        camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n\n        scene = new THREE.Scene();\n\n        raycaster = new THREE.Raycaster();\n\n\n        camera.position.x = -15;\n        camera.position.y = 5;\n        camera.position.z = 15;\n\n        controls = new OrbitControls(camera)\n        controls.target.y = 2;\n\n        renderer = new THREE.WebGLRenderer();\n        renderer.setClearColor(0xbfd1e5);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.shadowMap.enabled = true;\n\n        textureLoader = new THREE.TextureLoader();\n\n        var ambientLight = new THREE.AmbientLight(0x404040);\n        scene.add(ambientLight);\n\n        var light = new THREE.DirectionalLight(0xffffff, 1);\n        light.position.set(-10, 10, 5);\n        light.castShadow = true;\n        var d = 10;\n        light.shadow.camera.left = -d;\n        light.shadow.camera.right = d;\n        light.shadow.camera.top = d;\n        light.shadow.camera.bottom = -d;\n\n        light.shadow.camera.near = 2;\n        light.shadow.camera.far = 50;\n\n        light.shadow.mapSize.x = 1024;\n        light.shadow.mapSize.y = 1024;\n\n        scene.add(light);\n\n\n        container.innerHTML = \"\";\n\n        container.appendChild(renderer.domElement);\n\n        // stats = new Stats();\n        // stats.domElement.style.position = 'absolute';\n        // stats.domElement.style.top = '0px';\n        // container.appendChild( stats.domElement );\n\n        window.addEventListener('mousemove', onDocumentMouseMove, false);\n        window.addEventListener('resize', onWindowResize, false);\n        document.addEventListener( 'mousedown', onDocumentMouseDown, false );\n\n\n    }\n\n    function onDocumentMouseDown( event ) {\n\n        event.preventDefault();\n        \n\n        if(INTERSECTED) {\n\n            createSlackline(camera.position, INTERSECTED, 3);\n\n        }\n        else {\n            console.log(\"no intersections\");\n        }\n\n      \n    }\n\n    function onDocumentMouseMove(event) {\n\n        event.preventDefault();\n\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n\n    }\n\n\n    function initPhysics() {\n\n        // Physics configuration\n        collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration();\n        dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);\n        broadphase = new Ammo.btDbvtBroadphase();\n        solver = new Ammo.btSequentialImpulseConstraintSolver();\n        softBodySolver = new Ammo.btDefaultSoftBodySolver();\n        physicsWorld = new Ammo.btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration, softBodySolver);\n        physicsWorld.setGravity(new Ammo.btVector3(0, gravityConstant, 0));\n        physicsWorld.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, gravityConstant, 0));\n\n    }\n\n    function createTestScene() {\n        // Ground\n\n\n        const pos = new THREE.Vector3();\n        const quat = new THREE.Quaternion();\n\n        // pos.set(0, - 0.5, 0);\n        // quat.set(0, 0, 0, 1);\n        // const ground = createParalellepiped(40, 1, 40, 0, pos, quat, new THREE.MeshPhongMaterial({ color: 0xFFFFFF }));\n        // ground.castShadow = true;\n        // ground.receiveShadow = true;\n\n        const pos1 = new THREE.Vector3();\n\n        const slackMaxDelta = 5;\n\n        pos.set(-20, 5, -20);\n        pos1.set(20, 5, 20);\n\n        const slack0 = createSlackline(\n            pos, \n            pos1, \n            slackMaxDelta\n        );\n\n        pos.set(20, 5, -20);\n        const slack1 = createSlackline(\n            pos, \n            slack0.balls[5], \n            slackMaxDelta\n        );\n\n        pos.set(10, 10, -10);\n        const slack2 = createSlackline(\n            pos, \n            slack0.balls[7], \n            slackMaxDelta\n        );\n\n        const slack3 = createSlackline(\n            slack0.balls[7], \n            slack2.balls[3], \n            slackMaxDelta\n        );\n        \n    }\n\n    var brickB;\n\n\n\n\n    function createSlackline(a, b, maxDelta = 1) {\n\n        // todo : use btGeneric6DofSpringConstraint instead of rope\n        // todo : try to use same collision shape\n        // ? is BufferGeometry faster than array of objects\n        // ? if it is faster can I use it to connect several ropes\n\n\n        let anchorA, anchorB;\n        let pos = new THREE.Vector3();\n        let quat = new THREE.Quaternion();\n        const AnchorSize = .35;\n\n        if(a instanceof THREE.Vector3) {\n            console.log(\"vector\");\n            anchorA = createSphere(AnchorSize, 0, a, quat, createMaterial());\n        }\n        else if (a instanceof THREE.Mesh){\n            console.log(\"sphere\");\n            anchorA = a;\n            a = anchorA.position;\n        }\n\n        if(b instanceof THREE.Vector3) {\n            console.log(\"vector\");\n            anchorB = createSphere(AnchorSize, 0, b, quat, createMaterial());\n        }\n        else if (b instanceof THREE.Mesh){\n            console.log(\"sphere\");\n            anchorB = b;\n            b = anchorB.position;\n        }\n\n\n        pos = b.clone().sub(a);\n\n        const ropeLength = pos.length();\n        const ropeDensity = .1;\n        const numSegments = Math.ceil(ropeLength / maxDelta);\n        console.log(\"num of segments = \" + numSegments);\n\n        const segmentLength = ropeLength / numSegments;\n        const segmentMass = ropeDensity * segmentLength;       \n        // const ballPositions = [];\n        const ballRadius = segmentLength * .25;\n        const balls = [];\n        const springLengths = [];\n\n        for (let i = 0; i < numSegments; i++) {\n            const k = (i + .5) / numSegments;\n            const newPos = new THREE.Vector3(pos.x, pos.y, pos.z);\n            newPos.multiplyScalar(k);\n            newPos.add(a);\n            \n            balls.push(createSphere(ballRadius, segmentMass, newPos, quat, createMaterial()));\n        }\n\n        for (let i = 0; i < balls.length - 1; i++) {\n            const a = balls[i];\n            const b = balls[i + 1];\n\n            createSpring(a, b);\n        }\n\n        createSpring(anchorA, balls[0]);\n        createSpring(anchorB, balls[balls.length - 1]);\n\n        return {\n            anchors : [anchorA, anchorB],\n            balls : balls\n        }\n\n    }\n\n    function createSpring(a, b) {\n        let _tmpAmmoQuaternion = new Ammo.btQuaternion(0, 0, 0, 1);\n        //Change this to the length of the spring?\n        let _tmpAmmoVectorA = new Ammo.btVector3(0, 0, 0); //seems to be expressed in local world\n        let _tmpAmmoVectorB = new Ammo.btVector3(0, 0, 0);\n\n        //Is it a correct thing to create btTransform ? Is it not bind to a rigidbody ?\n        let transformA = new Ammo.btTransform(_tmpAmmoQuaternion, _tmpAmmoVectorA);\n        let transformB = new Ammo.btTransform(_tmpAmmoQuaternion, _tmpAmmoVectorB);\n\n        let spring1 =\n            new Ammo.btGeneric6DofSpringConstraint(\n                a.userData.physicsBody,\n                b.userData.physicsBody,\n                transformA,\n                transformB,\n                true\n            );\n        for (let i = 0; i < 3; i++) {\n            spring1.enableSpring(i, true);\n            spring1.setStiffness(i, 50);\n            spring1.setDamping(i, .001);  \n            // spring1.setEquilibriumPoint(i);\n        }\n\n        spring1.setLinearLowerLimit(new Ammo.btVector3(1, 1, 1));\n        spring1.setLinearUpperLimit(new Ammo.btVector3(0, 0, 0));\n        physicsWorld.addConstraint(spring1, false); //false is for collision between bodies   \n        return spring1;     \n    }\n\n\n\n\n    function createSphere(radius, mass, pos, quat, material) {\n\n        const threeObject = new THREE.Mesh(new THREE.SphereGeometry(radius), material);\n        threeObject.castShadow = true;\n\n        const shape = new Ammo.btSphereShape(radius);\n        shape.setMargin(margin);\n\n        createRigidBody(threeObject, shape, mass, pos, quat);\n\n        return threeObject;\n\n    }\n\n\n\n    function createParalellepiped(sx, sy, sz, mass, pos, quat, material) {\n\n        const threeObject = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz, 1, 1, 1), material);\n        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5, sy * 0.5, sz * 0.5));\n        shape.setMargin(margin);\n\n        createRigidBody(threeObject, shape, mass, pos, quat);\n\n        return threeObject;\n\n    }\n\n    function createRigidBody(threeObject, physicsShape, mass, pos, quat) {\n\n        threeObject.position.copy(pos);\n        threeObject.quaternion.copy(quat);\n\n        var transform = new Ammo.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));\n        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));\n        var motionState = new Ammo.btDefaultMotionState(transform);\n\n        var localInertia = new Ammo.btVector3(0, 0, 0);\n        physicsShape.calculateLocalInertia(mass, localInertia);\n\n        var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia);\n        var body = new Ammo.btRigidBody(rbInfo);\n\n        threeObject.userData.physicsBody = body;\n\n        scene.add(threeObject);\n\n        if (mass > 0) {\n            rigidBodies.push(threeObject);\n\n            // Disable deactivation\n            body.setActivationState(4);\n        }\n\n        physicsWorld.addRigidBody(body);\n\n    }\n\n    function createRandomColor() {\n        return Math.floor(Math.random() * (1 << 24));\n    }\n\n    function createMaterial() {\n        return new THREE.MeshPhongMaterial({ color: createRandomColor() });\n    }\n\n\n\n\n\n    function initInput() {\n\n        window.addEventListener('keydown', function (event) {\n\n            switch (event.keyCode) {\n                // Q\n                case 81:\n                    // armMovement = 1;\n                    render();\n                    break;\n\n                // A\n                case 65:\n                    armMovement = - 1;\n                    break;\n            }\n\n        }, false);\n\n        window.addEventListener('keyup', function (event) {\n\n            armMovement = 0;\n\n        }, false);\n\n    }\n\n    function onWindowResize() {\n\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n    }\n\n    function animate() {\n\n        requestAnimationFrame(animate);\n\n        stats.begin();\n        render();\n        stats.end();\n        // stats.update();\n\n    }\n\n    function render() {\n\n        var deltaTime = clock.getDelta();\n\n        updatePhysics(deltaTime);\n\n        controls.update(deltaTime);\n\n        getRaycast();\n\n        renderer.render(scene, camera);\n\n        time += deltaTime;\n\n    }\n\n    function getRaycast() {\n        // find intersections\n\n        raycaster.setFromCamera(mouse, camera);\n\n        const intersects = raycaster.intersectObjects(scene.children);\n\n        if ( intersects.length > 0 ) {\n\n            if ( INTERSECTED != intersects[ 0 ].object ) {\n\n                if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );\n\n                INTERSECTED = intersects[ 0 ].object;\n                INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();\n                INTERSECTED.material.emissive.setHex( 0xff0000 );\n\n            }\n\n        } else {\n\n            if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );\n\n            INTERSECTED = null;\n\n        }\n    }\n\n    function updatePhysics(deltaTime) {\n\n        // // Hinge control\n        // hinge.enableAngularMotor( true, 1.5 * armMovement, 50 );\n\n        // Step world\n        physicsWorld.stepSimulation(deltaTime, 10);\n\n        // Update rope\n        if (rope) {\n            var softBody = rope.userData.physicsBody;\n            var ropePositions = rope.geometry.attributes.position.array;\n            var numVerts = ropePositions.length / 3;\n            var nodes = softBody.get_m_nodes();\n            var indexFloat = 0;\n            for (var i = 0; i < numVerts; i++) {\n\n                var node = nodes.at(i);\n                var nodePos = node.get_m_x();\n                ropePositions[indexFloat++] = nodePos.x();\n                ropePositions[indexFloat++] = nodePos.y();\n                ropePositions[indexFloat++] = nodePos.z();\n\n            }\n            rope.geometry.attributes.position.needsUpdate = true;\n        }\n        // Update rigid bodies\n        for (var i = 0, il = rigidBodies.length; i < il; i++) {\n            var objThree = rigidBodies[i];\n            var objPhys = objThree.userData.physicsBody;\n            var ms = objPhys.getMotionState();\n            if (ms) {\n\n                ms.getWorldTransform(transformAux1);\n                var p = transformAux1.getOrigin();\n                var q = transformAux1.getRotation();\n                objThree.position.set(p.x(), p.y(), p.z());\n                objThree.quaternion.set(q.x(), q.y(), q.z(), q.w());\n\n            }\n        }\n\n        if (DEBUG) {\n            var objPhys = brickB.userData.physicsBody;\n\n            var ms = objPhys.getMotionState();\n\n            ms.getWorldTransform(transformAux1);\n            const p = transformAux1.getOrigin();\n\n            console.log(`x ${p.x()} y ${p.y()} z ${p.z()}`);\n        }\n\n    }\n\n});\n\n\n\n// function testSpring() {\n//     const pos = new THREE.Vector3();\n//     const quat = new THREE.Quaternion();\n\n//     const heightA = 10.;\n//     const heightB = 5.;\n\n//     pos.set(0, heightA, 0);\n//     const brickA = createParalellepiped(1, 1, 1, 0, pos, quat, new THREE.MeshPhongMaterial({ color: createRandomColor() }));\n\n//     pos.set(0, heightB, 0);\n//     brickB = createParalellepiped(1, 1, 1, 1, pos, quat, new THREE.MeshPhongMaterial({ color: createRandomColor() }));\n\n\n//     let _tmpAmmoQuaternion = new Ammo.btQuaternion(0, 0, 0, 1);\n//     //Change this to the length of the spring?\n//     let _tmpAmmoVectorA = new Ammo.btVector3(0, -1, 0); //seems to be expressed in local world\n//     let _tmpAmmoVectorB = new Ammo.btVector3(0, 1, 0);\n\n//     //Is it a correct thing to create btTransform ? Is it not bind to a rigidbody ?\n//     let transformA = new Ammo.btTransform(_tmpAmmoQuaternion, _tmpAmmoVectorA);\n//     let transformB = new Ammo.btTransform(_tmpAmmoQuaternion, _tmpAmmoVectorB);\n\n//     let spring1 =\n//         new Ammo.btGeneric6DofSpringConstraint(\n//             brickA.userData.physicsBody,\n//             brickB.userData.physicsBody,\n//             transformA,\n//             transformB,\n//             true\n//         );\n//     spring1.enableSpring(1, true);\n//     spring1.setStiffness(1, 10);\n//     spring1.setDamping(1, .01);\n//     spring1.setLinearLowerLimit(new Ammo.btVector3(0, 1, 0));\n//     spring1.setLinearUpperLimit(new Ammo.btVector3(0, 0, 0));\n//     physicsWorld.addConstraint(spring1, false); //false is for collision between bodies\n\n// }\n\n\n\n// function createSlackline(a, b, maxDelta = 1) {\n\n//     // todo : use btGeneric6DofSpringConstraint instead of rope\n//     // todo : try to use same collision shape\n//     // ? is BufferGeometry faster than array of objects\n//     // ? if it is faster can I use it to connect several ropes\n//     // todo : add stats to see perfomance gain\n\n\n//     let pos = new THREE.Vector3();\n//     let quat = new THREE.Quaternion();\n\n//     const AnchorSize = .05;\n//     const anchorA = createAnchor(a, AnchorSize);\n//     const anchorB = createAnchor(b, AnchorSize);\n\n//     pos = b.clone().sub(a);\n\n//     // here should adjust delta \n//     const numSegments = Math.ceil(pos.length() / maxDelta);\n\n//     console.log(\"num of segments = \" + numSegments);\n\n//     const ropeDensity = 10.;\n//     const ropeMass = ropeDensity * numSegments;\n//     const ropePositions = [];\n//     const ropeIndices = [];\n//     const ropeGeometry = new THREE.BufferGeometry();\n//     const ropeMaterial = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 10, linecap: 10 })\n\n//     for (let i = 0; i < numSegments + 1; i++) {\n//         const k = i / numSegments;\n//         const newPos = new THREE.Vector3(pos.x, pos.y, pos.z);\n//         newPos.multiplyScalar(k);\n//         newPos.add(a);\n//         ropePositions.push(newPos.x, newPos.y, newPos.z);\n//     }\n\n//     for (let i = 0; i < numSegments; i++) {\n//         ropeIndices.push(i, i + 1);\n//     }\n\n\n//     ropeGeometry.setIndex(new THREE.BufferAttribute(new Uint16Array(ropeIndices), 1));\n//     ropeGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(ropePositions), 3));\n//     ropeGeometry.computeBoundingSphere();\n//     rope = new THREE.LineSegments(ropeGeometry, ropeMaterial);\n//     rope.castShadow = true;\n//     rope.receiveShadow = true;\n//     scene.add(rope);\n\n//     // Rope physic object\n//     const softBodyHelpers = new Ammo.btSoftBodyHelpers();\n//     const ropeStart = new Ammo.btVector3(a.x, a.y, a.z);\n//     const ropeEnd = new Ammo.btVector3(b.x, b.y, b.z);\n//     const ropeSoftBody = softBodyHelpers.CreateRope(physicsWorld.getWorldInfo(), ropeStart, ropeEnd, numSegments - 1, 0);\n//     const sbConfig = ropeSoftBody.get_m_cfg();\n//     sbConfig.set_viterations(10);\n//     sbConfig.set_piterations(10);\n//     ropeSoftBody.setTotalMass(ropeMass, false)\n//     Ammo.castObject(ropeSoftBody, Ammo.btCollisionObject).getCollisionShape().setMargin(margin * 3);\n\n//     physicsWorld.addSoftBody(ropeSoftBody, 1, -1);\n//     rope.userData.physicsBody = ropeSoftBody;\n//     // Disable deactivation\n//     ropeSoftBody.setActivationState(4);\n\n//     // Glue the rope extremes to the ball and the arm\n//     var influence = 1;\n//     ropeSoftBody.appendAnchor(0, anchorA.userData.physicsBody, true, influence);\n//     ropeSoftBody.appendAnchor(numSegments, anchorB.userData.physicsBody, true, influence);\n\n// }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n// It's empty as some runtime module handles the default behavior\n__webpack_require__.x = x => {}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\nvar deferredModules = [\n\t[657,216]\n];\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = x => {};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime, executeModules] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkthree_seed\"] = self[\"webpackChunkthree_seed\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = x => {};\n\t}\n\treturn result;\n}\nvar startup = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = startup || (x => {});\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}